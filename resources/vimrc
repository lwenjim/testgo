call plug#begin()
 Plug 'rhysd/vim-clang-format'
 Plug 'neoclide/coc.nvim', {'branch': 'release'}
 Plug 'SirVer/ultisnips'
 Plug 'vim-airline/vim-airline'
 Plug 'vim-airline/vim-airline-themes'
 Plug 'joshdick/onedark.vim'
 Plug 'ctrlpvim/ctrlp.vim'
 Plug 'tomasr/molokai'
 Plug 'Yggdroot/LeaderF', { 'do': ':LeaderfInstallCExtension' }
 Plug 'airblade/vim-rooter'
 Plug 'fatih/vim-go'
 Plug 'mattn/webapi-vim'
 Plug 'rust-lang/rust.vim'
 Plug 'kana/vim-operator-user'
 Plug 'tomasiser/vim-code-dark'
 Plug 'dart-lang/dart-vim-plugin'
 Plug 'Pocco81/auto-save.nvim'
 Plug 'leafOfTree/vim-matchtag'
 Plug 'tpope/vim-commentary'
 Plug 'mhinz/vim-startify'
call plug#end()

""--------------
"" rust.vim
""--------------
let g:rust_clip_command = 'pbcopy'
let g:rustfmt_autosave = 1


""--------------
"" vim-clang-format
"" let g:clang_format#auto_format_on_insert_leave = 1
""--------------
let g:clang_format#auto_format = 1
let g:clang_format#style_options = { "AccessModifierOffset" : -4, "AllowShortIfStatementsOnASingleLine" : "true", "AlwaysBreakTemplateDeclarations" : "true", "Standard" : "C++11"}
let g:clang_format#auto_filetypes = ["c", "cpp", "objc", "javascript", "typescript", "arduino", "java"]
autocmd FileType c ClangFormatAutoEnable
autocmd FileType c,cpp,objc nnoremap <buffer><Leader>cf :<C-u>ClangFormat<CR>
autocmd FileType c,cpp,objc vnoremap <buffer><Leader>cf :ClangFormat<CR>
autocmd FileType c,cpp,objc map <buffer><Leader>x <Plug>(operator-clang-format)

""--------------
"" vim-go配置
""--------------
nnoremap <f2>   :GoFillStruct<cr>
nnoremap <f3>   :GoAlternate<cr>
nnoremap <f4>   :GoDecls<cr>
nnoremap <s-f6> :GoRename<cr>
let g:go_imports_autosave = 1
let g:go_debug_windows = {'vars':'rightbelow 60vnew','stack':'rightbelow 10new'}
let g:lightline = {'colorscheme': 'molokai'}
let g:onedark_termcolors=256  
let g:rehash256 = 1
let g:go_auto_type_info = 1
let g:go_auto_use_cmpfunc = 1
let g:go_fmt_fail_silently = 1
let g:go_metalinter_enabled = ["vet", "errcheck", "golangci-lint"]
let g:go_metalinter_autosave = 1
let g:go_metalinter_autosave_enabled = ["vet", "errcheck", "golangci-lint"]
let g:go_metalinter_deadline = "10s"
let g:go_metalinter_fast = 1
let g:go_metalinter_linters = ["vet", "errcheck", "golangci-lint"]
let g:go_gopls_enabled = 1
let g:go_def_mode = 'gopls'
let g:go_info_mode = 'gopls'
let g:go_autodetect_gopath = 1
let g:go_fmt_command = "goimports"
let g:go_decls_includes = "func,type"
let g:go_list_type = "quickfix"
let g:go_test_timeout = '10s'
let g:go_highlight_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_function_calls = 1
let g:go_highlight_operators = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_build_constraints = 1
let g:go_highlight_generate_tags = 1
let g:go_fmt_autosave = 1
let g:go_gopls_options = ['-remote=unix;/tmp/gopls-daemon-socket']
let g:go_completion_enabled = 1
let g:coc_disable_transparent_cursor = 1

"--------------
" coc.nvim推荐的配置--------------------
"--------------
set hidden
set nobackup
set nowritebackup
set cmdheight=2
set updatetime=300
set shortmess+=c
if has("nvim-0.5.0") || has("patch-8.1.1564")
  set signcolumn=number
else
  set signcolumn=yes
endif
inoremap <silent><expr> <c-@> coc#refresh()
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm(): "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"
nmap <silent> sn <Plug>(coc-diagnostic-prev)
nmap <silent> sp <Plug>(coc-diagnostic-next)
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
nnoremap <silent> K :call <SID>show_documentation()<CR>
function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction
nmap <leader>rn <Plug>(coc-rename)
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)
augroup mygroup
  autocmd!
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>ac  <Plug>(coc-codeaction)
nmap <leader>qf  <Plug>(coc-fix-current)
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)
command! -nargs=0 Format :call CocAction('format')
command! -nargs=? Fold :call     CocAction('fold', <f-args>)
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')
nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>

"--------------
" crip config
"--------------
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP /Users/jim/Workdata/goland/src/jspp'
let g:ctrlp_working_path_mode = 'w'
let g:ctrlp_root_markers = ['pom.xml', '.p4ignore']
let g:ctrlp_user_command = 'find %s -type f'        
let g:ctrlp_user_command = 'dir %s /-n /b /s /a-d'  
let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files -co --exclude-standard']
set wildignore+="*/tmp/*,*.so,*.swp,*.zip"
let g:ctrlp_switch_buffer = 'et'
let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn)$'
let g:ctrlp_custom_ignore = {'dir':  '\v[\/]\.(git|hg|svn)$','file': '\v\.(exe|so|dll)$','link': 'some_bad_symbolic_links',}

"--------------
" LeaderF start
"--------------
let mapleader=";" 
let g:Lf_CommandMap = {'<C-K>': ['<Up>'], '<C-J>': ['<Down>']}
let g:Lf_ShowDevIcons = 0
let g:Lf_WorkingDirectoryMode = 'a'
let g:Lf_RootMarkers = ['.workspace_root']
let g:Lf_UseVersionControlTool=0 
let g:Lf_DefaultExternalTool='rg'
let g:Lf_ExternalCommand = 'fd --ignore-file  /Users/jim/.ignore.ag.rg "%s"'
let g:Lf_PreviewInPopup = 0
let g:Lf_WindowHeight = 0.3
let g:Lf_PopupHeight = float2nr(&lines * 0.3)
let g:Lf_CacheDirectory = "/tmp"
let g:Lf_StlColorscheme = 'molokai'
let g:Lf_PopupAutoAdjustHeight = 1
let g:Lf_GtagsAutoGenerate = 1
let g:Lf_GtagsGutentags = 1
let g:Lf_ShortcutF = '<s-space>'
let g:Lf_ShortcutB = '<c-l>'
let g:Lf_PreviewResult = {'Function': 20, 'BufTag': 20 }
let g:Lf_NumberOfCache = 10000
let g:Lf_GtagsAutoGenerate = 1
let g:Lf_GtagsSource = 1
let g:Lf_Gtagsconf = '/usr/local/Cellar/global/6.6.10/share/gtags/gtags.conf'
let g:Lf_Gtagslabel = 'native-pygments'
let g:Lf_ReverseOrder = 0
let g:Lf_DefaultMode = 'NameOnly'
noremap <leader>f   :LeaderfSelf<cr>
noremap <leader>fm  :LeaderfMru<cr>
noremap <leader>ff  :LeaderfFunction<cr>
noremap <Leader>fb  :LeaderfBuffer<cr>
noremap <leader>ft  :LeaderfBufTag<cr>
noremap <leader>fl  :LeaderfLine<cr>
noremap <leader>fw  :LeaderfWindow<cr>
noremap <leader>frr :LeaderfRgRecall<cr>
noremap <leader>fgo :<C-U><C-R>=printf("Leaderf! gtags --recall %s", "")<CR><CR>
noremap <leader>fgn :<C-U><C-R>=printf("Leaderf gtags --next %s", "")<CR><CR>
noremap <leader>fgp :<C-U><C-R>=printf("Leaderf gtags --previous %s", "")<CR><CR>
noremap <c-space>   :<C-U>Leaderf rg --ignore-file /Users/jim/.ignore.ag.rg -e<Space>
noremap <leader>ra  <Plug>LeaderfRgCwordLiteralNoBoundary
noremap <leader>rb  <Plug>LeaderfRgCwordLiteralBoundary
noremap <leader>rc  <Plug>LeaderfRgCwordRegexNoBoundary
noremap <leader>rd  <Plug>LeaderfRgCwordRegexBoundary
noremap <leader>fgd <Plug>LeaderfGtagsDefinition
noremap <leader>fgr <Plug>LeaderfGtagsReference
noremap <leader>fgs <Plug>LeaderfGtagsSymbol
noremap <leader>fgg <Plug>LeaderfGtagsGrep

"--------------
" Rooter start
"--------------
let g:rooter_targets = '/,*.yml,*.yaml,*.go,*.proto,*.js'
let g:rooter_patterns = ['.workspace_root']
let g:eleline_slim = 1
let g:onedark_config = {'style': 'deep','toggle_style_key': '<leader>ts','ending_tildes': v:true,'diagnostics': {  'darker': v:false,  'background': v:false,},} 

""--------------
"" airline配置
""-------------- 
let g:airline_theme='molokai'
let g:airline#extensions#ale#enabled = 1 
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_sep = ''
let g:airline#extensions#tabline#left_alt_sep = ''
let g:airline#extensions#tabline#formatter = 'unique_tail'

"--------------
" vim基本属性配置
"--------------
set nu 
set nowrap
set showmatch 
set number
set cul
set mouse=a
set showmode
set showcmd
set encoding=utf-8  
set t_Co=256
set autoindent
set tabstop=4
set shiftwidth=4
set expandtab
set softtabstop=4
set relativenumber
set linebreak
set scrolloff=5
set sidescrolloff=15
set laststatus=2
set ruler
set showmatch
set hlsearch
set incsearch
set ignorecase
set smartcase
set spell spelllang=en_us
set nobackup
set noswapfile
set undofile
set autochdir
set history=10000
set autoread
set wildmenu
set wildmode=longest:list,full
set backspace=2
set exrc
set confirm      
set fileencodings=utf-8,ucs-bom,shift-jis,gb18030,gbk,gb2312,cp936,utf-16,big5,euc-jp,latin1      
set splitbelow      
set splitright     
set noundofile
set hidden
set shortmess+=c
set updatetime=100
set laststatus=2
set tags=./.tags;,.tags
set fileencoding=utf-8                                             
set termencoding=utf-8                                             
set nocompatible
set smartindent                                                    
set cindent                                                        
set termguicolors
set autowrite
set nospell
set foldmethod=indent
set foldenable              
set foldcolumn=0            
set foldlevel=1        
set foldlevelstart=99       
set updatetime=100
set cursorline
set clipboard=unnamed

syntax on                                                                                                            
filetype plugin indent on 

let g:vim_fold_background = 0
let g:netrw_winsize = 25
let g:auto_save = 1
let g:auto_save_events = ["InsertLeave", "TextChanged", "TextChangedI", "CursorHoldI", "CompleteDone"]
let g:rehash256 = 1
let g:molokai_original = 1
let g:syntastic_mode_map = {'mode': 'active', 'passive_filetypes': ['go', 'java', 'py', 'json', 'js', 'sql', 'c', 'h', 'cpp', 'rs', 'rb', 'lisp', 'lua'] }
let g:node_client_debug = 0

nnoremap <tab>   :bnext<Return>
nnoremap <s-tab> :bprev<Return>
vnoremap <c-c>   "+y
nnoremap <esc>   :noh<return>

highlight clear CursorLine
highlight Folded ctermfg=NONE ctermbg=NONE guibg=NONE guifg=NONE
highlight Folded guibg=NONE guifg=NONE
highlight FoldColumn guibg=NONE guifg=NONE


colorscheme codedark
"colorscheme molokai
