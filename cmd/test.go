package cmd

import (
	"fmt"

	"github.com/spf13/cobra"
)

var testCmd = &cobra.Command{
	Use:   "test",
	Short: "test",
	Long:  "test",
	Run: func(cmd *cobra.Command, args []string) {
		// zipPath := "/tmp/bb/1030553_ZDBROWSING_3_3101041737616999978_1_V2.zip"
		// file, err := os.Open(zipPath)
		// if err != nil {
		// 	fmt.Println(err.Error())
		// 	return
		// }
		// zipInfo, err := file.Stat()
		// if err != nil {
		// 	fmt.Println(err.Error())
		// 	return
		// }
		// fmt.Println(zipInfo.Size())

		// buffer := []byte("abcdef")
		// fmt.Printf("%s, %s\n", buffer[:len(buffer)/2], buffer[len(buffer)/2:])

		// ede2Key := []byte("example key 1234")
		// var tripleDESKey []byte
		// tripleDESKey = append(tripleDESKey, ede2Key[:16]...)
		// tripleDESKey = append(tripleDESKey, ede2Key[:8]...)
		// fmt.Printf("tripleDESKey: %d\n", len(tripleDESKey))
		// desCipher, err := des.NewTripleDESCipher(tripleDESKey)
		// if err != nil {
		// 	panic(err)
		// }
		// var inputData = []byte{0x32, 0x43, 0xf6, 0xa8, 0x88, 0x5a, 0x30, 0x8d, 0x31, 0x31, 0x98, 0xa2, 0xe0, 0x37, 0x07, 0x34}
		// out := make([]byte, len(inputData))
		// desCipher.Encrypt(out, inputData)
		// fmt.Printf("Encrypted data : %#v\n", out)
		// plain := make([]byte, len(inputData))
		// desCipher.Decrypt(plain, out)
		// fmt.Printf("Decrypted data : %#v\n", plain)

		// type DataObject struct {
		// 	Name string `json:"name"`
		// 	Age  int    `json:"age"`
		// }
		// var data interface{} = DataObject{
		// 	Name: "abc",
		// 	Age:  10,
		// }
		// buffer, _ := json.Marshal(data)
		// fmt.Println(string(buffer))

		// privateKey, err := rsa.GenerateKey(rand.Reader, 2048)
		// if err != nil {
		// 	panic(err)
		// }

		// derBytes := x509.MarshalPKCS1PrivateKey(privateKey)

		// block := &pem.Block{
		// 	Type:  "RSA PRIVATE KEY", // PEM 类型标识
		// 	Bytes: derBytes,          // 实际数据（DER 编码）
		// 	Headers: map[string]string{
		// 		"Comment": "Generated by Go", // 可选的头部信息
		// 	},
		// }

		// file, err := os.Create("private.pem")
		// if err != nil {
		// 	panic(err)
		// }
		// defer file.Close()

		// if err := pem.Encode(file, block); err != nil {
		// 	panic(err)
		// }

		// s := []int{3, 1, 5, 2, 4, 9}
		// examples.HeapSort(s)
		// fmt.Printf("s: %v\n", s)
		// code.jspp.com/jspp/adminsv/core.(*Core).ListAdmin-fm
		// data := "code.jspp.com/jspp/adminsv/core.(*Core).ListAdmin-fm"
		// splits := strings.Split(data, ".(*Core).")
		// splits = strings.Split(splits[1], "-")
		// fmt.Printf("splits[1]: %v\n", splits[0])
		// buffer, err := os.ReadFile("data.json")
		// if err != nil {
		// 	fmt.Println(err)
		// 	return
		// }
		// data := map[string]interface{}{}
		// _ = json.Unmarshal(buffer, &data)
		// arr := data["data"].([]interface{})
		// for _, v := range arr {
		// 	item := v.(map[string]interface{})
		// 	fmt.Printf("v: %v\n", item["parent_id"])
		// }
		switch {
		case true:
			fmt.Println(123)
		case true:
			fmt.Println(456)
		}
	},
}

func init() {
	rootCmd.AddCommand(testCmd)
}
